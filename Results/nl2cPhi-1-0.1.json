[
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a module named \"Anagram\" exporting the function \"anagramsFor\".\nOutput:\n",
        "base_model": "module Anagram where\n\nexport anagramsFor :: [String] -> [([String], Int)]\n\nEnd of module declaration.\n\n",
        "peft_model_v1": "module Anagram where\n\nexport anagramsFor :: [String] -> [([String], Bool))\n\nEnd of module declaration.\n\n",
        "peft_model_v2": "module Anagram where\n\nexport anagramsFor :: [String] -> [([String], Bool))\n\nEnd of module declaration.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImport the \"Data.List\" module for list manipulation functions. Import the \"Data.Char\" module for character manipulation functions.\nOutput:\n",
        "base_model": "import Data.List\nimport Data.Char\n\nEnd of code.\n\n",
        "peft_model_v1": "import Data.List\nimport Data.Char\n\nEnd of code.\n\n",
        "peft_model_v2": "import Data.List\nimport Data.Char\n\nEnd of code.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a function named \"lower\" converting all characters of a String to lowercase. Define the \"lower\" function using \"map\" and \"toLower\" for lowercase conversion.\nOutput:\n",
        "base_model": "lower :: String -> String\nlower = map toLower\n\nEnd of code.\n\n",
        "peft_model_v1": "lower :: String -> String\nlower = map toLower\n\nEnd of code.\n\n",
        "peft_model_v2": "lower :: String -> String\nlower = map toLower\n\nEnd of code.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a function named \"normalize\" to convert a String to lowercase and sort its characters. Define the \"normalize\" function using function composition with \"sort\" and \"lower\".\nOutput:\n",
        "base_model": "normalize = sort. lower\n\nEnd of code.\n\n",
        "peft_model_v1": "normalize = sort. lower\n\nEnd of code.\n\n",
        "peft_model_v2": "normalize = sort. lower\n\nEnd of code.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a function named \"anagram\" to check if two Strings are anagrams. Define the \"anagram\" function to compare lowercase versions and sorted versions of input Strings.\nOutput:\n",
        "base_model": "anagram :: String -> String -> Bool\nanagram (x:xs) (y:ys) =\n(lower x == lower y) && (sort x == sort y)\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n",
        "peft_model_v1": "anagram :: String -> String -> Bool\nanagram (x:xs) (y:ys) =\n(lower x == lower y) && (sort x == sort y)\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n",
        "peft_model_v2": "anagram :: String -> String -> Bool\nanagram (x:xs) (y:ys) =\n(lower x == lower y) && (sort x == sort y)\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a function named \"anagramsFor\" to find anagrams of a String in a list of Strings. Define the \"anagramsFor\" function using \"filter\" to select anagrams from the input list based on the \"anagram\" function.\nOutput:\n",
        "base_model": "anagramsFor :: Eq a => String -> [String] -> [String]\nanagramsFor str = filter anagram str\n\nEnd of code.\n\n",
        "peft_model_v1": "anagramsFor :: Eq a => String -> [String] -> [String]\nanagramsFor str = filter anagram str\n\nEnd of code.\n\n",
        "peft_model_v2": "anagramsFor :: Eq a => String -> [String] -> [String]\nanagramsFor s xs = filter (anagram s) xs\n\nEnd of code.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a module named Clock and export three functions: addDelta, fromHourMin, and toString.\nOutput:\n",
        "base_model": "module Clock where\n\nexport (addDelta :: Int -> Int -> Int),\n\nfromHourMin :: Int -> [Int],\n\ntoString :: [Int] -> String,\n\nend\n\nDeclare a function getClockState :: IO Int that returns the current state of the clock.\n",
        "peft_model_v1": "module Clock where\n\nexport (addDelta :: Int -> Int -> Int),\n\nfromHourMin :: Int -> [Int],\n\ntoString :: [Int] -> String,\n\nend\n\nDeclare a function getClock that returns a Clock.\n",
        "peft_model_v2": "module Clock where\n\nexport (addDelta :: Int -> Int -> Int),\n\nfromHourMin :: Int -> [Int],\n\ntoString :: [Int] -> String,\n\nend\n\nDeclare a function getClock that returns a Clock.\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImport the printf function from the Text.Printf module for string formatting.\nOutput:\n",
        "base_model": "import Text.Printf (printf)\n\nEnd of code.\n\n",
        "peft_model_v1": "import Text.Printf (printf)\n\nEnd of code.\n\n",
        "peft_model_v2": "import Text.Printf (printf)\n\nEnd of code.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a data type named Clock with a single field dayMins of type Int, indicating the number of minutes since midnight. Make sure to automatically generate equality comparisons for Clock instances.\nOutput:\n",
        "base_model": "data Clock = Clock dayMins\nwhere eq Clock (Clock other) = (dayMins == other.dayMins)\n\napply (eq :: Clock -> Clock -> Bool)\n\n",
        "peft_model_v1": "data Clock = Clock dayMins\nwhere eq Clock (Clock c) = eq (c) (Clock d) = True\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n",
        "peft_model_v2": "data Clock = Clock dayMins\nwhere eq Clock (Clock other) = (dayMins == other.dayMins)\n\napply (eq :: Clock -> Clock -> Bool)\n\nEnd of code.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a function that takes hours and minutes as arguments and returns a Clock object representing that time. Calculate the total minutes since midnight and ensure the time wraps around if it exceeds a day.\nOutput:\n",
        "base_model": "clock :: Int -> Int -> Clock\n\nclock h m = Clock (hoursToMinutes h) (minutesToHours m)\n\nhoursToMinutes (h | h >= 24) = (h - 24) * 60 + m\nhoursToMinutes h m = h * 60 + m\n\nminutesToHours (m | m >= 60) = (m / 60) + h\nminutesToHours m = m / 60 + h\n\nEnd of code.\n\n",
        "peft_model_v1": "clock :: Int -> Int -> Clock\n\nclock h m = Clock (hoursToMinutes h) (minutesToHours m)\n\nhoursToMinutes (h | h >= 24) = (h - 24) * 60 + m\nhoursToMinutes h m = h * 60 + m\n\nminutesToHours (m | m >= 60) = (m / 60) + h\nminutesToHours m = m / 60 + h\n\nEnd of code.\n\n",
        "peft_model_v2": "clock :: Int -> Int -> Clock\n\nclock h m = Clock (hoursToMinutes h) (minutesToHours m)\n\nhoursToMinutes (h | h >= 24) = (h - 24) * 60 + m\nhoursToMinutes h m = h * 60 + m\n\nminutesToHours (m | m >= 60) = (m / 60) + h\nminutesToHours m = m / 60 + h\n\nEnd of code.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a function that takes a Clock object and returns a formatted string representing the time in the format \"HH:MM\". Extract the dayMins field and format it using printf, padding the hour and minute components with zeros if necessary.\nOutput:\n",
        "base_model": "getTime :: Clock -> String\ngetTime = putDayMins. printf \"%02d:%02d\"\n\nEnd of code.\n\n",
        "peft_model_v1": "getTime :: Clock -> String\ngetTime = putDayMins. printf \"%02d:%02d\"\n\nEnd of code.\n\n",
        "peft_model_v2": "getTime :: Clock -> String\ngetTime = putDayMins. printf \"%02d:%02d\"\n\nEnd of code.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a function that takes hours, minutes, and a Clock object as arguments. Return a new Clock object representing the time after adding the specified delta. Add the delta to the current number of minutes since midnight, handle wrapping around if necessary, and construct a new Clock object with the updated time.\nOutput:\n",
        "base_model": "addDelta hours minutes (Clock clock) = Clock (minutes + delta, hours)\n\n| addDelta h m (Clock c) = Clock (m + delta, h)\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 (m + delta)\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 0\n\n| otherwise = Clock 0 0\n",
        "peft_model_v1": "addHours :: Int -> (Minute, Int) -> Clock\n\naddHours h (m, c) = (m + h', if (m + h') >= 60 then (m + h' `div` 60, 1) else (m + h', 0)), c\n\naddHours h (m, c) = (m + h', if (m + h') >= 60 then (m + h' `div` 60, 1) else (m + h', 0)), c\n\naddHours h (m, c) = (m + h', if (m + h') >= 60 then (m + h' `div` 60, 1) else (m + h', 0)), c\n\naddHours h (m, c) =",
        "peft_model_v2": "addHours :: Int -> (Minute, Int) -> Clock\n\naddHours h (m, c) = (m + h', if (m + h') >= 60 then (m + h' `div` 60, 1) else (m + h', 0)), c\n\naddHours h (m, c) = (m + h', if (m + h') >= 60 then (m + h' `div` 60, 1) else (m + h', 0)), c\n\naddHours h (m, c) = (m + h', if (m + h') >= 60 then (m + h' `div` 60, 1) else (m + h', 0)), c\n\naddHours h (m, c) ="
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a module named \"Hamming\". Export only the distance function from the module.\nOutput:\n",
        "base_model": "module Hamming where\n\nexport distance :: Int -> Int -> Int\n\nEnd of code.\n\nThis code declares a module named \"Hamming\" with a single function export distance that takes two integers as arguments and returns an integer.\n\n",
        "peft_model_v1": "module Hamming where\n\nexport distance :: Int -> Int -> Int\n\nEnd of code.\n\nThis code declares a module named \"Hamming\" with a single function export distance that takes two integers as arguments and returns an integer.\n\n",
        "peft_model_v2": "module Hamming where\n\nexport distance :: Int -> Int -> Int\n\nEnd of code.\n\nThis code declares a module named \"Hamming\" with a single function export distance that takes two integers as arguments and returns an integer.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine the type signature of the distance function as taking two strings as input and returning a Maybe Int.\nOutput:\n",
        "base_model": "distance :: String -> String -> Maybe Int\n\nEnd of output.\n\n",
        "peft_model_v1": "distance :: String -> String -> Maybe Int\n\nEnd of output.\n\n",
        "peft_model_v2": "distance :: String -> String -> Maybe Int\n\nEnd of output.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImplement the distance function to: Check if the lengths of the input strings are equal. If not, return Nothing. If equal, calculate the Hamming distance between the strings: Pair each character of the strings. Filter the pairs to keep only those with differing characters. Count the number of differing characters to get the Hamming distance. Wrap the distance in a Just constructor and return it.\nOutput:\n",
        "base_model": "distance (x:xs) (y:ys) = if length xs == length ys then 0 else 1 + distance xs ys\n\ndistance (x:xs) (y:ys) = if length xs == length ys then 0 else 1 + distance xs ys\n\ndistance (x:xs) (y:ys) = if length xs == length ys then 0 else 1 + distance xs ys\n\ndistance (x:xs) (y:ys) = if length xs == length ys then 0 else 1 + distance xs ys\n\ndistance (x:xs) (y:ys) = if length xs ==",
        "peft_model_v1": "distance (x:xs) (y:ys) = let (pairs) = zip (x:xs) (y:ys) in\n                    if length pairs == 0 then Nothing else\n                    Just $ countUps (\\(x,y) -> x/=y) pairs\n\n|> distance \"abc\" \"abd\"\n|> unwrap\n|> return $! (1+1)\n|> unwrap\n|> return 1\n\n|> distance \"abc\" \"abcd\"\n|> unwrap\n|> return 0\n\n|> distance \"abc\" \"ab\"\n|> unwrap\n|> return 1\n\n|",
        "peft_model_v2": "distance (x:xs) (y:ys) = let (pairs) = zip (x:xs) (y:ys) in\n                    if length pairs == 0 then Nothing else\n                    Just $ countUps (\\(x,y) -> x/=y) pairs\n\n|> distance \"abc\" \"abd\"\n|> unwrap\n|> return\n|> distance \"abc\" \"abd\"\n|> unwrap\n|> return\n|> distance \"abc\" \"ab\"\n|> unwrap\n|> return\n|> distance \"abc\" \"abcd\"\n|> unwrap\n|> return\n|> distance"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a module named Luhn and export the function isValid.\nOutput:\n",
        "base_model": "module Luhn\n\nexport isValid :: String -> Bool\n\nLuhn.isValid :: String -> Bool\n\nLuhn.isValid uses the given String and returns a Bool indicating whether it is a valid Luhn number.\n\nEnd of code.\n\n",
        "peft_model_v1": "module Luhn\n\nexport isValid :: String -> Bool\n\nLuhn.isValid :: String -> Bool\n\nLuhn.isValid uses the given String and returns whether it is a valid Luhn number using the given function.\n\nEnd of code.\n\n",
        "peft_model_v2": "module Luhn\n\nexport isValid :: String -> Bool\n\nLuhn.isValid :: String -> Bool\n\nLuhn.isValid uses the given String and returns a Bool indicating whether it is a valid Luhn number.\n\nEnd of code.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImport the Data.Char module for character and string manipulation functions.\nOutput:\n",
        "base_model": "import Data.Char\n\nEnd of import statement.\n\nDefine a function named 'capitalize' which takes a string and returns a new string with the first character capitalized.\n",
        "peft_model_v1": "import Data.Char\n\nEnd of import statement.\n\nDefine a function 'capitalize' that takes a string and returns a new string with the first character capitalized.\n",
        "peft_model_v2": "import Data.Char\n\nEnd of import statement.\n\nDefine a function named 'capitalize' which takes a string and returns a new string with the first character capitalized.\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a function called double that takes a String and returns another String. Call a helper function construct with the reversed input string s and an initial counter value of 1.\nOutput:\n",
        "base_model": "double :: String -> String\n\nhelper :: String -> Int\n\ndouble s = helper reverse s 1\n\nEnd of code.\n\n",
        "peft_model_v1": "double :: String -> String\ndouble s = construct s 1\n\n::\n\nEND\n\n::\n\ndouble s = construct s 1\n\n::\n\nEND\n\n::\n\ndouble s = construct s 1\n\n::\n\nEND\n\n::\n\ndouble s = construct s 1\n\n::\n\nEND\n\n::\n\ndouble s = construct s 1\n\n::\n\nEND\n\n::\n\ndouble s = construct s 1\n\n::\n\nEND\n\n::\n\ndouble s = construct s 1\n\n::\n\nEND\n\n::\n\ndouble s = construct s 1\n\n::\n\nEND\n\n::\n\ndouble s = construct s 1\n\n::\n\nEND\n\n::\n\ndouble s = construct s 1\n\n::\n\nEND\n\n::\n\ndouble s = construct s 1\n\n::\n\nEND\n",
        "peft_model_v2": "double :: String -> String\n\nhelper :: String -> Int -> String\n\ndouble s = helper reverse s 1\n\n::\n\nend\n\n::\n\ndouble \"hello\" = helper reverse \"hello\" 1\n\n::\n\nend\n\n::\n\ndouble \"world\" = helper reverse \"world\" 2\n\n::\n\nend\n\n::\n\ndouble \"!\" = helper reverse \"!\" 3\n\n::\n\nend\n\n::\n\ndouble \"123\" = helper reverse \"123\" 4\n\n::\n\nend\n\n::\n\ndouble \"456\" = helper reverse \"456\" 5\n\n::\n\nend\n\n::\n\ndouble \"!\" = helper reverse \"!\" 6\n\n::\n\nend\n\n::\n\ndouble \"123!\" = helper reverse \"123!\" 7\n\n::\n\nend\n\n::\n\ndouble \"456!\""
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImplement the construct helper function to process the reversed string by doubling every second digit starting from the rightmost digit. Recursively process the rest of the string.\nOutput:\n",
        "base_model": "helper (x:xs) = (2x:xs) : helper xs\n\nEnd of code.\n\n",
        "peft_model_v1": "helper (x:xs) = (2x:xs) : (helper xs)\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.",
        "peft_model_v2": "helper (x:xs) = (2x:xs) : (helper xs)\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition.\n\nEnd of main function definition.\n\nEnd of list definition.\n\nEnd of helper function definition."
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a function named sumS that takes a String and returns an Int. Implement the sumS function to convert each character in the input string to its corresponding integer value, then calculate the sum of these integers.\nOutput:\n",
        "base_model": "sumS :: String -> Int\nsumS = foldl' (+) 0\n\nsumS' :: String -> Int\nsumS' = foldl' (\\acc char -> acc + char - '0') 0\n\nsumS' (fromList :: String -> [Int]),\n\nsumS' (fromList :: String -> [Int]),\n\nsumS' (fromList :: String -> [Int]),\n\nsumS' (fromList :: String -> [Int]),\n\nsumS' (fromList :: String -> [Int]),\n\nsumS' (fromList :: String -> [Int]),\n\nsumS' (fromList :: String -> [Int]),\n\nsumS' (fromList :: String -> [Int]),\n\nsumS' (fromList :: String -> [Int]),\n\nsumS' (fromList",
        "peft_model_v1": "sumS :: String -> Int\nsumS = foldr (+) 0\n\nsumS' :: String -> Int\nsumS' = foldr (\\x acc -> let xc = fromChar x in xc + acc) 0\n\nsumS'' :: String -> Int\nsumS'' = foldr (\\x acc -> let xc = fromChar x in xc + acc) 0\n\nsumS''' :: String -> Int\nsumS''' = foldr (\\x acc -> let xc = fromChar x in xc + acc) 0\n\nsumS''' :: String -> Int\nsumS''' = foldr (\\x acc -> let xc = fromChar x in xc + acc) 0\n\nsumS''' :: String -> Int\nsumS'",
        "peft_model_v2": "sumS :: String -> Int\nsumS = foldr (+) 0\n\nsumS' :: String -> Int\nsumS' = foldr (\\x acc -> let xc = fromChar x in xc + acc) 0\n\nsumS' (\\x -> let xc = fromChar x in xc)\n\nsumS' (\\x -> let xc = fromChar x in xc)\n\nsumS' (\\x -> let xc = fromChar x in xc)\n\nsumS' (\\x -> let xc = fromChar x in xc)\n\nsumS' (\\x -> let xc = fromChar x in xc)\n\nsumS' (\\x -> let xc = fromChar x in xc)\n\nsumS' (\\x -> let"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a function named isValid that takes a String and returns a Bool. Implement the isValid function to check whether the input string represents a valid Luhn number. Filter out all non-digit characters, double every second digit, calculate the sum of all digits, and check if the sum is divisible by 10. Ensure that the normalized string is not \"0\". If both conditions are true, return True; otherwise, return False.\nOutput:\n",
        "base_model": "isValid str = (filter isDigit str /= \"0\") == (map (\\x -> 2*x) (dropWhile isDigit str) /= 0) /= (sum (map fromList str) '%10')\n\n|> isValid \"1234\"\n|> isValid \"1234a\"\n|> isValid \"1234b\"\n|> isValid \"1234c\"\n|> isValid \"1234d\"\n|> isValid \"1234e\"\n|> isValid \"1234f\"\n|> isValid \"1234g\"\n",
        "peft_model_v1": "isValid str = (filter isDigit str /= \"0\") == (map (\\x -> 2*x) (dropWhile isDigit str) /= 0) /= (sum (map isDigit str) /= 0)\n\n|> isValid \"1234\"\n|> isValid \"1235\"\n|> isValid \"1236\"\n|> isValid \"1237\"\n|> isValid \"1238\"\n|> isValid \"1239\"\n|> isValid \"1240\"\n|> isValid \"1241\"\n|> isValid \"12",
        "peft_model_v2": "isValid str = (filter isDigit str /= \"0\") == (map (\\x -> 2*x) (dropWhile isDigit str) /= 0) /= (sum (map fromList str) '%10')\n\n|> isValid \"1234\"\n|> isValid \"1235\"\n|> isValid \"1236\"\n|> isValid \"1237\"\n|> isValid \"1238\"\n|> isValid \"1239\"\n|> isValid \"1240\"\n|> isValid \"1241\"\n|> isValid \"1242"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare the type signature for the nth function, specifying that it takes an Int as input and returns a Maybe Integer.\nOutput:\n",
        "base_model": "nth :: Int -> Maybe Integer\n\nEnd of type signature for nth function.\n\n",
        "peft_model_v1": "nth :: Int -> Maybe Integer\n\nEnd of type signature for nth function.\n\n",
        "peft_model_v2": "nth :: Int -> Maybe Integer\n\nEnd of type signature for nth function.\n\n# "
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine the nth function with pattern matching. If n is less than 1, return Nothing to indicate an invalid input. If n equals 1, return Just 2 to indicate that the first prime number is 2. For any other value of n, calculate the n-th prime number using the isPrime function and the filter function.\nOutput:\n",
        "base_model": "nth n | n < 1 = Nothing | n == 1 = Just 2 | n > 1 = nth (n-1) (filter isPrime (map nth (filter isPrime (primeNumbers))),\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|",
        "peft_model_v1": "nth n | n < 1 = Nothing | n == 1 = Just 2 | n > 1 = nth (n-1) (filter isPrime (map nth (drop n (prime numbers))))\n\nEnd of code.\n\n",
        "peft_model_v2": "nth n | n < 1 = Nothing | n == 1 = Just 2 | n > 1 = nth (n-1) (filter isPrime (map nth (drop n (prime numbers))))\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine the isPrime function, taking an integer i and returning a boolean indicating whether i is prime. Check whether there are no divisors for i other than 1 and i itself. Iterate over numbers from 3 up to the square root of i (rounded down) and check whether i is divisible by any of them. If none are divisors, i is prime.\nOutput:\n",
        "base_model": "isPrime i | i/=1 && i/=i = True | otherwise = False\n\n| otherwise = False\n\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise =",
        "peft_model_v1": "isPrime i | i/=1 && i/=i = True | otherwise = False\n\n| otherwise = False\n\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise = False\n| otherwise =",
        "peft_model_v2": "isPrime i | i < 2 = False | otherwise = not (any (\\d -> i `mod` d == 0)) (range 3, sqrt(i))\n\nEnd of code.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a Haskell module named GameOfLife with tick as its exported function.\nOutput:\n",
        "base_model": "module GameOfLife where\n\nexport tick\n\nEnd of module.\n\n",
        "peft_model_v1": "module GameOfLife where\n\nexport tick\n\n:: IO ()\n\nTODO: Complete the module by defining other functions such as initialize, step, and render.\n\n",
        "peft_model_v2": "module GameOfLife where\n\nexport tick\n\nend\n\n# "
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImplement the tick function, which takes a 2D list of integers ([[Int]]) representing the current state of the grid and returns a new 2D list of integers representing the next state after one iteration.\nOutput:\n",
        "base_model": "tick :: [[Int]] -> [[Int]]\n\nImplement the reset function, which takes a 2D list of integers ([[Int]]) representing the current state of the grid and returns a new 2D list of integers representing the initial state (empty grid) without any changes.\n",
        "peft_model_v1": "tick :: [[Int]] -> [[Int]]\n\nImplement the reset function, which takes a 2D list of integers ([[Int]]) representing the current state of the grid and returns a new 2D list of integers representing the initial state (empty grid) without any changes.\n",
        "peft_model_v2": "tick :: [[Int]] -> [[Int]]\n\nImplement the reset function, which takes a 2D list of integers ([[Int]]) representing the current state of the grid and returns a new 2D list of integers representing the initial state (empty grid) without any changes.\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nUse list comprehensions to iterate over each cell in the input matrix. Inside the list comprehension, define a nested function turnCell that takes the coordinates (x, y) of a cell and returns its new state based on the rules of the Game of Life.\nOutput:\n",
        "base_model": "turnCell :: (Int, Int) -> Bool\n\napplyRule :: [[Bool]] -> [[Bool]]\n\napplyRuleCase 1 = [False]\napplyRuleCase 0 = [False]\napplyRuleCase x = [turnCell (x, y) : replicate n x for (y, n) in enumerate x]\n\napplyRuleMatrix = applyRuleCase\n\n| otherwise = []\n\n| otherwise = [[turnCell (x, y) | x <- xs] | y <- ys]\n\n| otherwise = [[turnCell (x, y) | x <- xs] | y <- ys]\n\n| otherwise = [[turnCell (x, y) | x <- xs] | y <- ys]\n\n| otherwise = [[turn",
        "peft_model_v1": "turnCell :: (Int, Int) -> Bool\n\napplyRule :: [[Bool]] -> [[Bool]]\n\napplyRuleCase 1 = [False]\napplyRuleCase 0 = [False]\napplyRuleCase x = [turnCell (x, y) : replicate n x for (y, n) in enumerate x]\n\napplyRuleMatrix = applyRuleCase\n\n|> transpose\n\n|> applyRuleCase\n\n|> transpose\n\n|> applyRuleCase\n\n|> transpose\n\n|> applyRuleCase\n\n|> transpose\n\n|> applyRuleCase\n\n|> transpose\n\n|> applyRuleCase\n\n|> transpose\n\n|> applyRuleCase\n\n|> transpose\n\n|>",
        "peft_model_v2": "turnCell :: (Int, Int) -> Bool\n\nlistComp :: [[Bool]]\n\nlistComp = [turnCell (x, y) | x <- [0..n-1], y <- [0..m-1], cell <- inputMatrix, cell == (x, y)]\n\nEnd of code.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nUse pattern matching within turnCell to handle the current state of the cell (either 0 or 1). If the current cell is dead (0), use a conditional expression to determine its next state based on the number of live neighbors. If the current cell is alive (1), use another conditional expression to determine its next state based on the number of live neighbors.\nOutput:\n",
        "base_model": "turnCell c = case c of\n0 -> if n == 0 then 1 else 0\n1 -> if n == 1 || n == 2 then 1 else 0\n\nEnd of code.\n\n",
        "peft_model_v1": "turnCell c = case c of\n0 -> if n == 0 then 1 else 0\n1 -> if n == 1 || n == 2 then 1 else 0\n\nEnd of code.\n\n",
        "peft_model_v2": "turnCell c = case c of\n0 -> if n == 0 then 1 else 0\n1 -> if n == 1 then 1 else 0\n\nEnd of code.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImplement a helper function countLive that takes the coordinates (x, y) of a cell and calculates the number of live neighbors it has. Inside countLive, use list comprehensions to iterate over the neighboring cells and sum their values.\nOutput:\n",
        "base_model": "countLive :: (Int, Int) -> Int\ncountLive (x, y) = sum (cell == 1 && (x-1 >= 0 && y-1 >= 0 && x+1 <= maxX && y+1 <= maxY)\n                                    |> takeWhile (\\(x', y') -> x' >= 0 && y' >= 0 && x' <= maxX && y' <= maxY)\n                                    |> map (\\(x, y) -> cell `elem` [x-1, x, x+1, y-1, y, y+1])\n                                    |> sum)\n\nEnd of helper function.\n\n",
        "peft_model_v1": "countLive :: (Int, Int) -> Int\ncountLive (x, y) = sum (cell == 1 && inBounds (x-1, y-1) (cell))...\n\nEnd of helper function.\n\n",
        "peft_model_v2": "countLive :: (Int, Int) -> Int\ncountLive (x, y) = sum (cell == 1 && (x-1 >= 0 && y-1 >= 0 && x+1 <= maxX && y+1 <= maxY)\n                                    |> takeWhile (\\(x', y') -> x' >= 0 && y' >= 0 && x' <= maxX && y' <= maxY)\n                                    |> map (\\(x, y) -> cell `elem` [x-1, x, x+1, y-1, y, y+1])\n                                    |> sum)\n\nEnd of helper function.\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nEnsure that cells at the edge of the grid are correctly handled by checking that their coordinates are within the valid range. Define a list indices containing the valid indices for both rows and columns of the matrix. Use this indices list to ensure that when calculating neighboring cell coordinates, they stay within the bounds of the matrix. Make sure to exclude the current cell from the neighbor count calculation.\nOutput:\n",
        "base_model": "indices = [(i,j) | i <- [1..n-1], j <- [1..m-1]]\n\n|> putStrLn \"Neighbors of cell (i,j) in matrix: \" ++\n|> map (\\(i,j) -> putStrLn \" - \" ++\n|                     map (\\(x,y) -> putStrLn \" - \" ++\n|                     map (\\(x',y') -> putStrLn \" - \" ++\n|                     show (x' - i, y' - j)) indices)\n\nEnd of Output.\n\n|> putStrLn \"End of Output.",
        "peft_model_v1": "indices = [(i,j) | i <- [1..n-1], j <- [1..m-1]]\n\n|> putStrLn \"Neighbors of cell (`n`,`m`) are: \" ++\n|> map (\\(i,j) -> putStrLn \" - \" ++ map (\\(x,y) -> putStrLn \" - \" ++ show x ++ \" - \" ++ show y)) indices\n\n|> putStrLn \"Done\"\n\nEnd of list of instructions.\n\n|> end\n\n",
        "peft_model_v2": "indices = [(i,j) | i <- [1..n-1], j <- [1..m-1]]\n\n|> putStrLn \"Neighbors of cell (`n`,`m`) are: \" ++\n|> map (\\(i,j) -> putStrLn \" - \" ++\n|> map (\\(x,y) -> putStrLn \" - \" ++ show (x,y)) (indices ++ [(n,m)]))\n\n|> putStrLn \"Done\"\n\nThis code uses a list comprehension to generate the valid indices for both rows and columns of the matrix. It then uses the"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nCreate a Haskell module named Triangle to encapsulate the functions related to generating Pascal's triangle.\nOutput:\n",
        "base_model": "module Triangle where\n\napply: (Triangle t) -> IO ()\n\ngetRow: Int -> IO (Triangle t)\n\nputRow: Int -> IO (Triangle t)\n\ngetAll: Int -> IO (Triangle t)\n\nputAll: Int -> IO (Triangle t)\n\nend:\n\ngetRow: Int -> IO (Triangle t)\n\ngetRow: Int -> IO (Triangle t)\n\ngetAll: Int -> IO (Triangle t)\n\nputAll: Int -> IO (Triangle t)\n\nend:\n\ngetRow: Int -> IO (Triangle t)\n\ngetRow: Int -> IO (Triangle t)\n\ngetAll: Int -> IO (Triangle t)\n\nputAll: Int -> IO (Triangle t)\n\nend:\n\ngetRow: Int -> IO (Triangle t)\n\ngetRow: Int -> IO (",
        "peft_model_v1": "module Triangle where\n\napply: apply function (a -> a) to a list of values [a]\n\ngetRow: getRow :: Int -> [Int]\n\ngetColumn: getColumn :: Int -> [Int]\n\ngetAll: getAll :: [Int] -> [[Int]]\n\ngetAllInverted: getAllInverted :: [Int] -> [[Int]]\n\ngetAllWithDuplicates: getAllWithDuplicates :: [Int] -> [[Int]]\n\ngetAllWithoutDuplicates: getAllWithoutDuplicates :: [Int] -> [[Int]]\n\ngetAllFrom: getAllFrom :: [Int] -> [Int]\n\ngetAllFromRight: getAllFromRight :: [Int] -> [Int]\n\ngetAllFromBottom: getAllFromBottom :: [Int] -> [Int]\n\ngetAllFromTop: getAllFromTop :: [Int] -> [Int]\n\nget",
        "peft_model_v2": "module Triangle where\n\napply: apply function (a -> a) to a list of values [a]\n\ngetRow: getRow :: Int -> [Int]\n\ngetColumn: getColumn :: Int -> [Int]\n\ngetDiagonal: getDiagonal :: Int -> [Int]\n\ngetAntiDiagonal: getAntiDiagonal :: Int -> [Int]\n\ngetAll: getAll :: [Int] -> [Int]\n\ngetFirst: getFirst :: [Int] -> Int\n\ngetLast: getLast :: [Int] -> Int\n\ngetMiddle: getMiddle :: [Int] -> Int\n\ngetSum: getSum :: [Int] -> Int\n\ngetMax: getMax :: [Int] -> Int\n\ngetMin: getMin :: [Int] -> Int\n\ngetCount: getCount :: [Int] -> Int\n\ngetUnique: getUnique :: [Int] -> [Int]\n\ngetUnique"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine the type signature of the rows function. It should take an integer n as input and return a list of lists of integers ([[Integer]]).\nOutput:\n",
        "base_model": "rows :: Integer -> [[Integer]]\n\n",
        "peft_model_v1": "rows :: Integer -> [[Integer]]\n\n",
        "peft_model_v2": "rows :: Integer -> [[Integer]]\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImplement the rows function using list comprehension or higher-order functions like take and map. rows should generate the first n rows of Pascal's triangle.\nOutput:\n",
        "base_model": "rows n = take n (map (\\x -> x:map (\\y -> if y == x then 1 else 0) (1:rows (n-1))) 1)\n\n# Using list comprehension:\nrows n = take n (map (\\x -> x:map (\\y -> if y == x then 1 else 0) (1:rows (n-1))) 1)\n\n# Using higher-order functions:\nrows n = take n (map (\\x -> x:map (\\y -> if y == x then 1 else 0) (1:rows (n-1))) 1)\n\n# Using the (\\x -> x:... ) notation for list comprehension:\nrows n = take n (map (\\x -> x:... ) 1)\n\n# Using the (\\x -> x:... ) notation for higher-order functions:\nrows n = take",
        "peft_model_v1": "rows n = take n (map (\\x -> x:map (\\y -> if y == x then 1 else 0) (1:rows (n-1))) 1)\n\n# or\nrows n = take n (map (\\x -> x:map (\\y -> if y == x then 1 else 0) (1:rows (n-1))) 1)\n\n# or\nrows n = take n (map (\\x -> x:map (\\y -> if y == x then 1 else 0) (1:rows (n-1))) 1)\n\n# or\nrows n = take n (map (\\x -> x:map (\\y -> if y == x then 1 else 0) (1:rows (n-1))) 1)\n\n# or\nrows n = take n (map (\\x -> x:map (\\y -> if y ==",
        "peft_model_v2": "rows n = take n (map (\\x -> x:map (\\y -> if y == x then 1 else 0) (1:rows (n-1))) 1)\n\n# or\nrows n = take n (map (\\x -> x:map (\\y -> if y == x then 1 else 0) (1:rows (n-1))) 1)\n\n# or\nrows n = take n (map (\\x -> x:map (\\y -> if y == x then 1 else 0) (1:rows (n-1))) 1)\n\n# or\nrows n = take n (map (\\x -> x:map (\\y -> if y == x then 1 else 0) (1:rows (n-1))) 1)\n\n# or\nrows n = take n (map (\\x -> x:map (\\y -> if y =="
    }
]