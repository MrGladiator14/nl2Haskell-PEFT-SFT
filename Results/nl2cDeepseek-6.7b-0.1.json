[
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a module named \"Anagram\" exporting the function \"anagramsFor\".\nOutput:\n",
        "base_model": "anagramsFor :: String -> [String] -> [String]\nanagramsFor \"listen\" [\"enlists\", \"google\", \"inlets\", \"banana\"]\n[\"inlets\"]\nanagramsFor \"massage\" [\"stream\", \"massage\", \"just\"]\n[\"stream\", \"massage\"]\nanagramsFor \"massage\" [\"stream\", \"massage\", \"just\", \"massage\"]\n[\"stream\", \"massage\", \"massage\"]\nanagramsFor \"massage\" [\"stream\", \"massage\", \"just\", \"massage\", \"stream\"]\n[\"stream\", \"massage\", \"massage\", \"stream\"]\nanagramsFor \"massage\" [\"stream\", \"massage\", \"just\", \"massage\", \"stream\", \"stream\"]\n[\"stream\", \"massage\", \"massage\", \"stream\", \"stream\"]\nanagrams"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImport the \"Data.List\" module for list manipulation functions. Import the \"Data.Char\" module for character manipulation functions.\nOutput:\n",
        "base_model": "\n1. Define a function \"removeNonAlpha\" that takes a string as input and returns a new string with all non-alphabetic characters removed.\n\n2. Define a function \"countWords\" that takes a string as input and returns the number of words in the string.\n\n3. Define a function \"countVowels\" that takes a string as input and returns the number of vowels in the string.\n\n4. Define a function \"reverseString\" that takes a string as input and returns a new string with the characters in reverse order.\n\n5. Define a function \"isPalindrome\" that takes a string as input and returns True if the string is a palindrome (i.e., the same forwards and backwards), and False otherwise.\n\n6. Define a function \"removeDuplicates\" that takes a list of integers as input and"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a function named \"lower\" converting all characters of a String to lowercase. Define the \"lower\" function using \"map\" and \"toLower\" for lowercase conversion.\nOutput:\n",
        "base_model": "lower \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nlower \"abcdefghijklmnopqrstuvwxyz\"\nlower \"0123456789\"\nlower \"Hello World\"\nlower \"hELLO wORLD\"\nlower \"hELLO wORLD\"\nlower \"hELLO wORLD\"\nlower \"hELLO wORLD\"\nlower \"hELLO wORLD\"\nlower \"hELLO wORLD\"\nlower \"hELLO wORLD\"\nlower \"hELLO wORLD\"\nlower \"hELLO wORLD\"\nlower \"hELLO wORLD\"\nlower \"hELLO wORLD\""
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a function named \"normalize\" to convert a String to lowercase and sort its characters. Define the \"normalize\" function using function composition with \"sort\" and \"lower\".\nOutput:\n",
        "base_model": "normalize \"Hello\"\n\"ehllo\"\nnormalize \"GoodBye\"\n\"byeego\"\nnormalize \"aaabbbccc\"\n\"aaabbbccc\"\nnormalize \"abcdefg\"\n\"abcdefg\"\nnormalize \"aabbcc\"\n\"aabbcc\"\nnormalize \"abc\"\n\"abc\"\nnormalize \"a\"\n\"a\"\nnormalize \"\"\n\"\"\n<\uff5cend\u2581of\u2581sentence\uff5c>"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a function named \"anagram\" to check if two Strings are anagrams. Define the \"anagram\" function to compare lowercase versions and sorted versions of input Strings.\nOutput:\n",
        "base_model": "\n> anagram :: String -> String -> Bool\n> anagram x y = (sort x) == (sort y)\n\nDeclare a function named \"anagram2\" to check if two Strings are anagrams. Define the \"anagram2\" function to compare lowercase versions of input Strings.\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a function named \"anagramsFor\" to find anagrams of a String in a list of Strings. Define the \"anagramsFor\" function using \"filter\" to select anagrams from the input list based on the \"anagram\" function.\nOutput:\n",
        "base_model": "\n> anagramsFor :: String -> [String] -> [String]\n> anagramsFor word list = filter (anagram word) list\n\n> anagram :: String -> String -> Bool\n> anagram word1 word2 = sort word1 == sort word2\n\n> sort :: String -> String\n> sort [] = []\n> sort (x:xs) = sort [a | a <- xs, a <= x] ++ [x] ++ sort [a | a <- xs, a > x]\n\n> main :: IO ()\n> main = do\n>   putStrLn \"Enter a word:\"\n>   word <- getLine\n>   putStrLn"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a module named Clock and export three functions: addDelta, fromHourMin, and toString.\nOutput:\n",
        "base_model": "\n> module Clock where\n>\n> import Data.List\n>\n> data Clock = Clock { hour :: Int, minute :: Int } deriving (Eq, Show)\n>\n> addDelta :: Clock -> Int -> Clock\n> addDelta (Clock h m) delta = Clock (h + deltaH) (m + deltaM)\n>   where\n>     deltaH = delta `div` 60\n>     deltaM = delta `mod` 60\n>\n> fromHourMin :: Int -> Int -> Clock\n> fromHourMin h m = Clock (h + deltaH) (m + deltaM)\n>   where\n>     deltaH = m `div` 60\n>     deltaM = m `mod` 60\n>\n> toString :: Clock ->"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImport the printf function from the Text.Printf module for string formatting.\nOutput:\n",
        "base_model": "\nThe function should take a list of integers as input and return a string that contains the sum of all the even numbers in the list.\n\nExample:\n\nInput: [1, 2, 3, 4, 5]\nOutput: \"The sum of all even numbers is 6\"\n\nInput: [2, 4, 6, 8, 10]\nOutput: \"The sum of all even numbers is 30\"\n\nInput: [1, 3, 5, 7, 9]\nOutput: \"The sum of all even numbers is 0\"\n\nInput: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nOutput: \"The sum of all even numbers is 110\"\n\nInput: [1, 2, 3"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a data type named Clock with a single field dayMins of type Int, indicating the number of minutes since midnight. Make sure to automatically generate equality comparisons for Clock instances.\nOutput:\n",
        "base_model": "data Clock = Clock { dayMins :: Int }\ninstance Eq Clock where\n  (==) = undefined\n\nDefine a function named addClock that takes two Clock instances and returns a new Clock instance that represents the sum of the two Clocks.\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a function that takes hours and minutes as arguments and returns a Clock object representing that time. Calculate the total minutes since midnight and ensure the time wraps around if it exceeds a day.\nOutput:\n",
        "base_model": "\n> data Clock = Clock { getHours :: Int, getMinutes :: Int }\n>   deriving (Show, Eq)\n>\n> clock :: Int -> Int -> Clock\n> clock h m = Clock (h + m `div` 60) (m `mod` 60)\n\nDefine a function that takes a Clock object and returns the total number of minutes since midnight.\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a function that takes a Clock object and returns a formatted string representing the time in the format \"HH:MM\". Extract the dayMins field and format it using printf, padding the hour and minute components with zeros if necessary.\nOutput:\n",
        "base_model": "\n```haskell\nformatTime :: Clock -> String\nformatTime clock = printf \"%02d:%02d\" hour minute\n  where\n    dayMins = clockDayMins clock\n    hour = dayMins `div` 60\n    minute = dayMins `mod` 60\n```\n\nDefine a function that takes a Clock object and returns a new Clock object with the time incremented by one minute. Extract the dayMins field and increment it by 1.\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a function that takes hours, minutes, and a Clock object as arguments. Return a new Clock object representing the time after adding the specified delta. Add the delta to the current number of minutes since midnight, handle wrapping around if necessary, and construct a new Clock object with the updated time.\nOutput:\n",
        "base_model": "\n> data Clock = Clock { getHours :: Int, getMinutes :: Int } deriving (Show, Eq)\n> addDelta :: Int -> Int -> Clock -> Clock\n> addDelta hours minutes clock = Clock (getHours clock + hours + (getMinutes clock + minutes) `div` 60) ((getMinutes clock + minutes) `mod` 60)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a module named \"Hamming\". Export only the distance function from the module.\nOutput:\n",
        "base_model": "\ndistance :: String -> String -> Int\ndistance \"a\" \"a\" = 0\ndistance \"a\" \"b\" = 1\ndistance \"a\" \"ab\" = 1\ndistance \"a\" \"abc\" = 2\ndistance \"a\" \"abcd\" = 3\ndistance \"a\" \"abcde\" = 4\ndistance \"a\" \"abcdef\" = 5\ndistance \"a\" \"abcdefg\" = 6\ndistance \"a\" \"abcdefgh\" = 7\ndistance \"a\" \"abcdefghi\" = 8\ndistance \"a\" \"abcdefghij\" = 9\ndistance \"a\" \"abcdefghijk\" = 10\ndistance \"a\" \"abcdefghijkl\" = 11\ndistance \"a\" \"abcdefghijklm\" = 12\ndistance \"a\" \"abcdefghijklmn\" = 13\ndistance \""
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine the type signature of the distance function as taking two strings as input and returning a Maybe Int.\nOutput:\n",
        "base_model": "distance :: String -> String -> Maybe Int\n\nDefine the distance function to calculate the Levenshtein distance between two strings.\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImplement the distance function to: Check if the lengths of the input strings are equal. If not, return Nothing. If equal, calculate the Hamming distance between the strings: Pair each character of the strings. Filter the pairs to keep only those with differing characters. Count the number of differing characters to get the Hamming distance. Wrap the distance in a Just constructor and return it.\nOutput:\n",
        "base_model": "\ndistance :: String -> String -> Maybe Int\ndistance \"karolin\" \"kathrin\" == Just 3\ndistance \"kathrin\" \"kerstin\" == Just 3\ndistance \"kerstin\" \"kathrin\" == Just 3\ndistance \"kerstin\" \"kerstin\" == Just 0\ndistance \"kerstin\" \"kerst\" == Nothing\ndistance \"kerst\" \"kerstin\" == Nothing\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a module named Luhn and export the function isValid.\nOutput:\n",
        "base_model": "\n> module Luhn where\n> import Data.Char\n> import Data.List\n\n> isValid :: String -> Bool\n> isValid xs = let ys = reverse $ map digitToInt xs\n>              in (sum $ zipWith (*) ys (cycle [1, 2])) `mod` 10 == 0\n\n<\uff5cend\u2581of\u2581sentence\uff5c>"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImport the Data.Char module for character and string manipulation functions.\nOutput:\n",
        "base_model": "\n> import Data.Char\n\nDefine a function called \"removeNonAlpha\" that takes a string as input and returns a new string with only the alphabetic characters from the original string.\n\n> removeNonAlpha :: String -> String\n> removeNonAlpha str = [c | c <- str, isAlpha c]\n\nDefine a function called \"removeNonDigit\" that takes a string as input and returns a new string with only the digits from the original string.\n\n> removeNonDigit :: String -<\uff5cbegin\u2581of\u2581sentence\uff5c> -> String\n> removeNonDigit str = [c | c <- str, isDigit c]\n\nDefine a function called \"removeNonAlphaDigit\" that takes a string as input and returns a new string with only the alphabetic characters and digits from the original string.\n\n> removeNonAlphaDigit :: String -> String\n>"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a function called double that takes a String and returns another String. Call a helper function construct with the reversed input string s and an initial counter value of 1.\nOutput:\n",
        "base_model": "double \"hello\"\n\"olleh\"\ndouble \"hello world\"\n\"dlrow olleh\"\ndouble \"hello world!\"\n\"dlrow olleh!\"\ndouble \"hello world!\"\n\"dlrow olleh!\"\ndouble \"hello world!\"\n\"dlrow olleh!\"\ndouble \"hello world!\"\n\"dlrow olleh!\"\ndouble \"hello world!\"\n\"dlrow olleh!\"\ndouble \"hello world!\"\n\"dlrow olleh!\"\ndouble \"hello world!\"\n\"dlrow olleh!\"\ndouble \"hello world!\"\n\"dlrow olleh!\"\ndouble \"hello world!\"\n\"dlrow olleh!\"\ndouble \"hello world!\"\n\"dlrow olleh!\"\ndouble \"hello world!\"\n\"dlrow olleh!\"\ndouble \""
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImplement the construct helper function to process the reversed string by doubling every second digit starting from the rightmost digit. Recursively process the rest of the string.\nOutput:\n",
        "base_model": "The helper function should return a string that is the result of processing the reversed string.\nInput:\nThe function should take a string as input.\nExample:\nInput: \"123456789\"\nOutput: \"112233445566778899\"\nExplanation:\nThe input string is \"123456789\", which is reversed to \"987654321\".\nThe helper function processes the reversed string by doubling every second digit starting from the rightmost digit.\nThe resulting string is \"112233445566778899\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a function named sumS that takes a String and returns an Int. Implement the sumS function to convert each character in the input string to its corresponding integer value, then calculate the sum of these integers.\nOutput:\n",
        "base_model": "sumS \"123\"\n6\nsumS \"abc\"\n9\nsumS \"123abc\"\n15\nsumS \"abc123\"\n15\nsumS \"abc123abc\"\n21\nsumS \"abc123abc123\"\n33\nsumS \"abc123abc123abc\"\n45\nsumS \"abc123abc123abc123\"\n66\nsumS \"abc123abc123abc123abc\"\n88\nsumS \"abc123abc123abc123abc123\"\n110\nsumS \"abc123abc123abc123abc123"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a function named isValid that takes a String and returns a Bool. Implement the isValid function to check whether the input string represents a valid Luhn number. Filter out all non-digit characters, double every second digit, calculate the sum of all digits, and check if the sum is divisible by 10. Ensure that the normalized string is not \"0\". If both conditions are true, return True; otherwise, return False.\nOutput:\n",
        "base_model": "\nisValid \"4091 7819 0300 0000\"\nTrue\nisValid \"4091 7819 0300 0001\"\nFalse\nisValid \"4091 7819 0300 0002\"\nFalse\nisValid \"4091 7819 0300 0003\"\nFalse\nisValid \"4091 7819 030"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare the type signature for the nth function, specifying that it takes an Int as input and returns a Maybe Integer.\nOutput:\n",
        "base_model": "nth :: Int -> Maybe Integer\n\nDeclare the type signature for the fib function, specifying that it takes an Integer as input and returns an Integer.\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine the nth function with pattern matching. If n is less than 1, return Nothing to indicate an invalid input. If n equals 1, return Just 2 to indicate that the first prime number is 2. For any other value of n, calculate the n-th prime number using the isPrime function and the filter function.\nOutput:\n",
        "base_model": "\n> nth :: Integer -> Maybe Integer\n> nth n\n>   | n < 1 = Nothing\n>   | n == 1 = Just 2\n>   | otherwise = Just $ head $ filter isPrime [3,5..] !! (n-2)\n\nDefine the isPrime function with pattern matching. If n is less than 2, return False to indicate that n is not a prime number. If n is 2, return True to indicate that 2 is a prime number. For any other value of n, check if n is divisible by any number between 2 and the square root of n. If n is divisible by any of these numbers"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine the isPrime function, taking an integer i and returning a boolean indicating whether i is prime. Check whether there are no divisors for i other than 1 and i itself. Iterate over numbers from 3 up to the square root of i (rounded down) and check whether i is divisible by any of them. If none are divisors, i is prime.\nOutput:\n",
        "base_model": "\nisPrime :: Integer -> Bool\nisPrime i =\n  let\n    sqrtI = floor $ sqrt $ fromIntegral i\n  in\n    not $ any (\\x -> i `mod` x == 0) [3 .. sqrtI]\n\nInstruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine the isPrime function, taking an integer i and returning a boolean indicating whether i is prime. Check whether there are no divisors for i other than <\uff5cbegin\u2581of\u2581sentence\uff5c>1<\uff5cend\u2581of\u2581sentence\uff5c>"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a Haskell module named GameOfLife with tick as its exported function.\nOutput:\n",
        "base_model": "tick :: GameOfLife -> GameOfLife\ntick is a function that takes a GameOfLife and returns a new GameOfLife that is one step further in the game.\nInput:\ntype GameOfLife = [(Int, Int)]\ntype Coord = (Int, Int)\ntype Neighbors = [Coord]\ntype Cell = (Int, Int)\ntype Grid = [Cell]\ntype GameOfLife = [Cell]\n\nGameOfLife is a list of cells that are alive.\nCoord is a pair of integers representing a coordinate.\nNeighbors is a list of coordinates that are the neighbors of a cell.\nCell is a pair of integers representing a cell.\nGrid is a list of cells that are alive.\nGameOfLife is a list of cells that are alive.\n\nInstructions:\n1. Define a function called neighbors that takes a Coord and"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImplement the tick function, which takes a 2D list of integers ([[Int]]) representing the current state of the grid and returns a new 2D list of integers representing the next state after one iteration.\nOutput:\n",
        "base_model": "The tick function should return a 2D list of integers representing the next state after one iteration.\nExample 1:\nInput:\n[[0, 0, 0],\n [1, 1, 1],\n [0, 0, 0]]\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nUse list comprehensions to iterate over each cell in the input matrix. Inside the list comprehension, define a nested function turnCell that takes the coordinates (x, y) of a cell and returns its new state based on the rules of the Game of Life.\nOutput:\n",
        "base_model": "The output should be a list of lists representing the updated matrix after applying the Game of Life rules.\n\nExample:\nInput:\n[[0, 1, 0, 0],\n [0, 0, 1, 0],\n [0, 0, 0, 0],\n [0, 0, 0, 0]]\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nUse pattern matching within turnCell to handle the current state of the cell (either 0 or 1). If the current cell is dead (0), use a conditional expression to determine its next state based on the number of live neighbors. If the current cell is alive (1), use another conditional expression to determine its next state based on the number of live neighbors.\nOutput:\n",
        "base_model": "\nThe output should be a list of lists representing the next generation of cells. Each inner list should contain the next generation of cells for a single row.\n\nExample:\n\nInput:\n\n[[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0], [1, 1, 1, 0]]\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImplement a helper function countLive that takes the coordinates (x, y) of a cell and calculates the number of live neighbors it has. Inside countLive, use list comprehensions to iterate over the neighboring cells and sum their values.\nOutput:\n",
        "base_model": "\ncountLive :: (Int, Int) -> Int\ncountLive (x, y) = sum [grid !! (x + dx) !! (y + dy) | dx <- [-1..1], dy <- [-1..1], dx /= 0 || dy /= 0]\n\nExplanation:\n\nThe function countLive takes a pair of integers (x, y) representing the coordinates of a cell in a grid. It uses list comprehensions to generate a list of the values of the neighboring cells, excluding the cell itself. The resulting list is then summed to get the total number of live neighbors.\n\nNote that the function uses the !! operator to access the elements of the grid, which is a list of lists. The !! operator is used to access the"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nEnsure that cells at the edge of the grid are correctly handled by checking that their coordinates are within the valid range. Define a list indices containing the valid indices for both rows and columns of the matrix. Use this indices list to ensure that when calculating neighboring cell coordinates, they stay within the bounds of the matrix. Make sure to exclude the current cell from the neighbor count calculation.\nOutput:\n",
        "base_model": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nCreate a Haskell module named Triangle to encapsulate the functions related to generating Pascal's triangle.\nOutput:\n",
        "base_model": "\nThe first line of the input contains an integer N (1 <= N <= 100), which represents the number of test cases. Then N lines follow, each line contains an integer K (1 <= K <= 100), which represents the row index (from 1 to 100).\n\nFor each test case, you should output the Kth row of the Pascal's triangle in a line. The elements must be separated by a space, and there must be no extra space at the beginning or the end of each line.\n\nSample Input\n\n4\n1\n2\n3\n4\nSample Output\n\n1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine the type signature of the rows function. It should take an integer n as input and return a list of lists of integers ([[Integer]]).\nOutput:\n",
        "base_model": "rows 0 = []\nrows 1 = [[1]]\nrows 2 = [[1], [1, 1]]\nrows 3 = [[1], [1, 1], [1, 2, 1]]\nrows 4 = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\nrows 5 = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nrows 6 = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], ["
    },
    {
        "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImplement the rows function using list comprehension or higher-order functions like take and map. rows should generate the first n rows of Pascal's triangle.\nOutput:\n",
        "base_model": "\nrows 5\n[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n\nrows 10\n[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1],[1,9,36,84,126,126,84,36"
    }
]