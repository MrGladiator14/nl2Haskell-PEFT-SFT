Index,Instruction
1,"Declare a module named ""Anagram"" exporting the function ""anagramsFor""."
2,"Import the ""Data.List"" module for list manipulation functions. Import the ""Data.Char"" module for character manipulation functions."
3,"Declare a function named ""lower"" converting all characters of a String to lowercase. Define the ""lower"" function using ""map"" and ""toLower"" for lowercase conversion."
4,"Declare a function named ""normalize"" to convert a String to lowercase and sort its characters. Define the ""normalize"" function using function composition with ""sort"" and ""lower""."
5,"Declare a function named ""anagram"" to check if two Strings are anagrams. Define the ""anagram"" function to compare lowercase versions and sorted versions of input Strings."
6,"Declare a function named ""anagramsFor"" to find anagrams of a String in a list of Strings. Define the ""anagramsFor"" function using ""filter"" to select anagrams from the input list based on the ""anagram"" function."
7,"Declare a module named Clock and export three functions: addDelta, fromHourMin, and toString."
8,"Import the printf function from the Text.Printf module for string formatting."
9,"Define a data type named Clock with a single field dayMins of type Int, indicating the number of minutes since midnight. Make sure to automatically generate equality comparisons for Clock instances."
10,"Define a function that takes hours and minutes as arguments and returns a Clock object representing that time. Calculate the total minutes since midnight and ensure the time wraps around if it exceeds a day."
11,"Define a function that takes a Clock object and returns a formatted string representing the time in the format ""HH:MM"". Extract the dayMins field and format it using printf, padding the hour and minute components with zeros if necessary."
12,"Define a function that takes hours, minutes, and a Clock object as arguments. Return a new Clock object representing the time after adding the specified delta. Add the delta to the current number of minutes since midnight, handle wrapping around if necessary, and construct a new Clock object with the updated time."
13,"Declare a module named ""Hamming"". Export only the distance function from the module."
14,"Define the type signature of the distance function as taking two strings as input and returning a Maybe Int."
15,"Implement the distance function to: Check if the lengths of the input strings are equal. If not, return Nothing. If equal, calculate the Hamming distance between the strings: Pair each character of the strings. Filter the pairs to keep only those with differing characters. Count the number of differing characters to get the Hamming distance. Wrap the distance in a Just constructor and return it."
16,"Declare a module named Luhn and export the function isValid."
17,"Import the Data.Char module for character and string manipulation functions."
18,"Define a function called double that takes a String and returns another String. Call a helper function construct with the reversed input string s and an initial counter value of 1."
19,"Implement the construct helper function to process the reversed string by doubling every second digit starting from the rightmost digit. Recursively process the rest of the string."
20,"Define a function named sumS that takes a String and returns an Int. Implement the sumS function to convert each character in the input string to its corresponding integer value, then calculate the sum of these integers."
21,"Define a function named isValid that takes a String and returns a Bool. Implement the isValid function to check whether the input string represents a valid Luhn number. Filter out all non-digit characters, double every second digit, calculate the sum of all digits, and check if the sum is divisible by 10. Ensure that the normalized string is not ""0"". If both conditions are true, return True; otherwise, return False."
22,"Declare the type signature for the nth function, specifying that it takes an Int as input and returns a Maybe Integer."
23,"Define the nth function with pattern matching. If n is less than 1, return Nothing to indicate an invalid input. If n equals 1, return Just 2 to indicate that the first prime number is 2. For any other value of n, calculate the n-th prime number using the isPrime function and the filter function."
24,"Define the isPrime function, taking an integer i and returning a boolean indicating whether i is prime. Check whether there are no divisors for i other than 1 and i itself. Iterate over numbers from 3 up to the square root of i (rounded down) and check whether i is divisible by any of them. If none are divisors, i is prime."
25,"Define a Haskell module named GameOfLife with tick as its exported function."
26,"Implement the tick function, which takes a 2D list of integers ([[Int]]) representing the current state of the grid and returns a new 2D list of integers representing the next state after one iteration."
27,"Use list comprehensions to iterate over each cell in the input matrix. Inside the list comprehension, define a nested function turnCell that takes the coordinates (x, y) of a cell and returns its new state based on the rules of the Game of Life."
28,"Use pattern matching within turnCell to handle the current state of the cell (either 0 or 1). If the current cell is dead (0), use a conditional expression to determine its next state based on the number of live neighbors. If the current cell is alive (1), use another conditional expression to determine its next state based on the number of live neighbors."
29,"Implement a helper function countLive that takes the coordinates (x, y) of a cell and calculates the number of live neighbors it has. Inside countLive, use list comprehensions to iterate over the neighboring cells and sum their values."
30,"Ensure that cells at the edge of the grid are correctly handled by checking that their coordinates are within the valid range. Define a list indices containing the valid indices for both rows and columns of the matrix. Use this indices list to ensure that when calculating neighboring cell coordinates, they stay within the bounds of the matrix. Make sure to exclude the current cell from the neighbor count calculation."
31,"Create a Haskell module named Triangle to encapsulate the functions related to generating Pascal's triangle."
32,"Define the type signature of the rows function. It should take an integer n as input and return a list of lists of integers ([[Integer]])."
33,"Implement the rows function using list comprehension or higher-order functions like take and map. rows should generate the first n rows of Pascal's triangle."